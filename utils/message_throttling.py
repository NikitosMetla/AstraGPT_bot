import asyncio
import time
import traceback
from typing import Any, Awaitable, Callable, Dict, Optional

from aiogram import BaseMiddleware
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, TelegramObject

from db.repository import users_repository, admin_repository, events_repository, subscriptions_repository
from settings import MESSAGE_SPAM_TIMING
from bot import logger


class CombinedMiddleware(BaseMiddleware):
    """
    –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

    ‚úÖ –ù–æ–≤–æ–µ –≤ –≤–µ—Ä—Å–∏–∏ 2025‚Äë06‚Äë11
        ‚Ä¢ –ù–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–º –∂–µ `media_group_id` (–∞–ª—å–±–æ–º—ã —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤).
        ‚Ä¢ –£–±—Ä–∞–Ω–æ –±–ª–æ–∫–∏—Ä—É—é—â–µ–µ `await asyncio.sleep()`; —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ñ–æ–Ω–µ —á–µ—Ä–µ–∑ `asyncio.create_task`.
    """

    def __init__(self, debug: bool = False):
        self.storage: Dict[int, Dict[str, Any]] = {}
        self.debug = debug
        self.events_repo = events_repository
        if self.debug:
            print("CombinedMiddleware initialized with debugging enabled.")

    # ---------------------------------------------------------------------
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    # ---------------------------------------------------------------------

    def log(self, message: str) -> None:
        if self.debug:
            print(message)

    async def _unblock_later(self, user_id: int) -> None:
        """–°–Ω–∏–º–∞–µ—Ç —Ñ–ª–∞–≥ `spam_block` –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ `MESSAGE_SPAM_TIMING`."""
        await asyncio.sleep(MESSAGE_SPAM_TIMING)
        if user_id in self.storage:
            self.storage[user_id]["spam_block"] = False
            self.log(f"Spam block lifted for user_id={user_id}")

    # ---------------------------------------------------------------------
    # –û—Å–Ω–æ–≤–Ω–æ–π –≤—ã–∑–æ–≤ middleware
    # ---------------------------------------------------------------------

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        user_id: Optional[int] = None
        media_gid: Optional[str] = None

        try:
            # ------------------ –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id –∏ media_group_id ------------------
            if isinstance(event, Message):
                user_id = event.from_user.id
                media_gid = event.media_group_id
            elif isinstance(event, CallbackQuery):
                user_id = event.from_user.id
            elif hasattr(event, "from_user") and event.from_user:
                user_id = event.from_user.id

            # ----------------------- –ê–Ω—Ç–∏‚Äë—Å–ø–∞–º‚Äë—Ñ–∏–ª—å—Ç—Ä -----------------------
            if isinstance(event, Message) and user_id:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
                user_data = await users_repository.get_user_by_user_id(user_id=user_id)
                data["user_data"] = user_data

                # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if not user_data:
                    await event.answer(
                        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ - AstraGPT. –í–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π –º–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è, "
                        "—É—á–∏—Ç—å—Å—è, —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –µ—â–µ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –≤—Å–µ–≥–æ. –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏ –∑–∞–¥–∞—á—É –∏ —è —Å–¥–µ–ª–∞—é –≤—Å–µ –≤ –ª—É—á—à–µ–º –≤–∏–¥–µ! üöÄ"
                    )
                    await asyncio.sleep(1)
                    await users_repository.add_user(user_id=user_id, username=event.from_user.username)
                    logger.log("JOIN", f"{user_id} | @{event.from_user.username}")
                    self.log(f"New user registered: user_id={user_id}, username=@{event.from_user.username}")
                # user_sub = await subscriptions_repository.get_active_subscription_by_user_id(user_id=user_id)
                # if user_sub is None:
                #     await subscriptions_repository.add_subscription(type_sub_id=2, user_id=user_id,
                #                                                     photo_generations=3, time_limit_subscription=30)
                # –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                check = self.storage.get(user_id)

                # ‚ûä –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–π –∂–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã -----------------
                if media_gid and check and check.get("media_group_id") == media_gid:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ timestamp –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—É
                    self.storage[user_id]["timestamp"] = time.time()
                    self.log(f"Message skipped spam‚Äëcheck (same media_group_id) for user_id={user_id}")
                    return await handler(event, data)
                #
                # ‚ûã –ë–∞–∑–æ–≤–∞—è –∞–Ω—Ç–∏‚Äë—Å–ø–∞–º‚Äë–ª–æ–≥–∏–∫–∞ -----------------------------------------
                if check:
                    # –£–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –±–ª–æ–∫? ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    if check["spam_block"]:
                        self.log(f"Spam block active for user_id={user_id}, ignoring message.")
                        return

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    if time.time() - check["timestamp"] <= MESSAGE_SPAM_TIMING:
                        self.storage[user_id]["timestamp"] = time.time()
                        self.storage[user_id]["spam_block"] = True
                        await event.answer(
                            "<b>–î–∞–≤–∞–π –ø–æ–º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–µ —É—Å–ø–µ–≤–∞—é –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã ü´†</b>",
                            parse_mode=ParseMode.HTML
                        )
                        logger.log("SPAM", f"{user_id} | @{event.from_user.username}")
                        self.log(f"Spam detected for user_id={user_id}, blocking temporarily.")

                        # –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —á—Ç–æ–±—ã –Ω–µ —Ç–æ—Ä–º–æ–∑–∏—Ç—å pipeline
                        asyncio.create_task(self._unblock_later(user_id))
                        return

                # ‚ûå –û–±–Ω–æ–≤–ª—è–µ–º / —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ --------------
                self.storage[user_id] = {
                    "timestamp": time.time(),
                    "spam_block": False,
                    "media_group_id": media_gid,  # –º–æ–∂–µ—Ç –±—ã—Ç—å None
                }
                self.log(f"Updated storage for user_id={user_id}: {self.storage[user_id]}")

            # -------------------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è --------------------------
            if user_id:
                event_type: Optional[str] = None
                if isinstance(event, Message):
                    if event.text:
                        event_type = "message_text"
                    elif event.photo:
                        event_type = "message_photo"
                    elif event.document:
                        event_type = "message_document"
                    elif event.voice:
                        event_type = "message_voice"
                    else:
                        event_type = "message_other"
                elif isinstance(event, CallbackQuery):
                    event_type = "callback_query"
                else:
                    event_type = f"event_{event.__class__.__name__}"

                # –ü–∏—à–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î
                user = await users_repository.get_user_by_user_id(user_id=user_id)
                if user and event_type:
                    await self.events_repo.add_event(user_id=user_id, event_type=event_type)

            # –ü–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–µ–Ω–¥–ª–µ—Ä—É --------------------------------
            return await handler(event, data)

        except Exception as e:
            # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            self.log(f"Error in CombinedMiddleware for user_id={user_id}: {e}")
            logger.log(
                "ERROR_HANDLER",
                f"{user_id} | –û—à–∏–±–∫–∞ –≤ CombinedMiddleware: {traceback.format_exc()}"
            )

        finally:
            if user_id:
                self.log(f"Final storage state for user_id={user_id}: {self.storage.get(user_id)}")
