import asyncio
import datetime
import traceback
import pytz

from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from db.repository import users_repository, notifications_repository, subscriptions_repository, \
    type_subscriptions_repository
from utils.payment_for_services import create_recurring_payment

scheduler: AsyncIOScheduler | None = None


async def safe_send_notif(bot: Bot):
    from bot import logger
    """
    –í–æ–∫—Ä—É–≥ send_notif ‚Äî —Å–≤–æ—è –∑–æ–Ω–∞ try/except.
    –õ—é–±–∞—è –æ—à–∏–±–∫–∞ —Ç–∞–º –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è, –Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –∂–∏—Ç—å.
    """
    try:
        await send_notif(bot)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ send_notif")

def job_error_listener(event):
    from bot import logger
    """
    –õ–∏—Å—Ç–µ–Ω–µ—Ä –¥–ª—è –æ—à–∏–±–æ–∫ –≤–Ω—É—Ç—Ä–∏ –∑–∞–¥–∞—á.
    """
    logger.error(f"Job {event.job_id} failed: {event.exception}")

async def monitor_scheduler():
    from bot import logger
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ scheduler.running==True, –∏–Ω–∞—á–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º.
    """
    global scheduler
    while True:
        await asyncio.sleep(300)  # –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        if scheduler and not scheduler.running:
            logger.warning("Scheduler is not running ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º")
            try:
                scheduler.start()
            except Exception:
                logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å scheduler")


async def send_notif(bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    moscow_tz = pytz.timezone('Europe/Moscow')
    utc_now = datetime.datetime.utcnow()
    moscow_now = utc_now.replace(tzinfo=pytz.UTC).astimezone(moscow_tz)
    
    # –£–±–∏—Ä–∞–µ–º timezone info –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å naive datetime –∏–∑ –ë–î
    moscow_now_naive = moscow_now.replace(tzinfo=None)
    
    notifications = await notifications_repository.select_all_active_notifications()
    for notif in notifications:
        try:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ notif.when_send —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (naive datetime)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if moscow_now_naive >= notif.when_send:
                await bot.send_message(chat_id=notif.user_id, text="<b>üö®–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n\n" + notif.text_notification)
                await notifications_repository.update_active_by_notification_id(notification_id=notif.id)
        except Exception:
            print(traceback.format_exc())
            continue


#
async def extend_users_sub(main_bot: Bot):
    from bot import logger
    users_subs = await subscriptions_repository.select_all_active_subscriptions()
    now_datetime = datetime.datetime.now()
    for sub in users_subs:
        type_sub = await type_subscriptions_repository.get_type_subscription_by_id(type_id=sub.type_subscription_id)
        if sub is not None and type_sub.plan_name != "Free":
            try:
                if sub.method_id is None:
                    await subscriptions_repository.deactivate_subscription(subscription_id=sub.id)
                    await main_bot.send_message(chat_id=sub.user_id,
                                                text="–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–∏—Ç—å —Ç–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É."
                                                     " –ï—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å, —á—Ç–æ –ø—Ä–∏ —ç—Ç–æ–º —É —Ç–µ–±—è"
                                                     " —Å–ø–∏—Å–∞–ª–∏—Å—å –¥–µ–Ω—å–≥–∏ - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–∏ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É @sozdav_ai")
                    continue

                result = create_recurring_payment(method_id=sub.method_id,
                                                  amount=type_sub.price)
                if result:
                    # try:
                    max_generations = type_sub.max_generations
                    await subscriptions_repository.replace_subscription(subscription_id=sub.id,
                                                                        user_id=sub.user_id,
                                                                        time_limit_subscription=30,
                                                                        active=True,
                                                                        type_sub_id=type_sub.id,
                                                                        method_id=sub.method_id,
                                                                        photo_generations=max_generations)

                    await main_bot.send_message(chat_id=sub.user_id,
                                                text="–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ –æ–¥–∏–Ω –º–µ—Å—è—Ü")
            except:
                logger.log("EXTEND_SUB_ERROR", traceback.format_exc())
                await main_bot.send_message(chat_id=sub.user_id,
                                            text="–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–∏—Ç—å —Ç–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É."
                                                 " –ï—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å, —á—Ç–æ –ø—Ä–∏ —ç—Ç–æ–º —É —Ç–µ–±—è"
                                                 " —Å–ø–∏—Å–∞–ª–∏—Å—å –¥–µ–Ω—å–≥–∏ - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–∏ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ /support")