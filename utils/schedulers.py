import asyncio
import datetime
import traceback
import pytz

from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from db.repository import users_repository, notifications_repository, subscriptions_repository, \
    type_subscriptions_repository
from utils.payment_for_services import create_recurring_payment

scheduler: AsyncIOScheduler | None = None

import asyncio
import traceback
# from datetime import datetime
from apscheduler.events import (
    EVENT_JOB_EXECUTED,
    EVENT_JOB_ERROR,
    EVENT_JOB_MISSED,
    EVENT_SCHEDULER_SHUTDOWN,
    EVENT_SCHEDULER_PAUSED,
    JobExecutionEvent
)


def job_error_listener(event: JobExecutionEvent):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –∑–∞–¥–∞—á–∞—Ö"""
    from settings import logger

    error_msg = f"Job '{event.job_id}' failed with exception:\n{event.exception}\n{event.traceback}"
    logger.log("SCHEDULER_ERROR", error_msg)

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
    # asyncio.create_task(notify_admins_about_error(event))


def scheduler_shutdown_listener(event):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    from settings import logger
    logger.log("SCHEDULER_ERROR", f"Scheduler shutdown at {datetime.now()}")


def scheduler_paused_listener(event):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—É–∑—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    from settings import logger
    logger.log("SCHEDULER_ERROR", f"Scheduler paused at {datetime.now()}")


async def monitor_scheduler():
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    """
    from settings import logger

    while True:
        try:
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
        except Exception as e:
            logger.log("SCHEDULER_ERROR", f"Monitor error: {traceback.format_exc()}")


async def safe_send_notif(bot: Bot):
    from settings import logger
    """
    –í–æ–∫—Ä—É–≥ send_notif ‚Äî —Å–≤–æ—è –∑–æ–Ω–∞ try/except.
    –õ—é–±–∞—è –æ—à–∏–±–∫–∞ —Ç–∞–º –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è, –Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –∂–∏—Ç—å.
    """
    try:
        await send_notif(bot)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ send_notif")


async def send_notif(bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    moscow_tz = pytz.timezone('Europe/Moscow')
    utc_now = datetime.datetime.utcnow()
    moscow_now = utc_now.replace(tzinfo=pytz.UTC).astimezone(moscow_tz)

    # –£–±–∏—Ä–∞–µ–º timezone info –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å naive datetime –∏–∑ –ë–î
    moscow_now_naive = moscow_now.replace(tzinfo=None)
    
    notifications = await notifications_repository.select_all_active_notifications()
    for notif in notifications:
        try:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ notif.when_send —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (naive datetime)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if moscow_now_naive >= notif.when_send:
                await bot.send_message(chat_id=notif.user_id, text="<b>üö®–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n\n" + notif.text_notification)
                await notifications_repository.update_active_by_notification_id(notification_id=notif.id)
        except Exception:
            print(traceback.format_exc())
            continue


async def safe_extend_users_sub(main_bot: Bot):
    from settings import logger
    try:
        await extend_users_sub(main_bot=main_bot)
    except:
        logger.log("SCHEDULER_ERROR", f"safe_extend_users_sub error: {traceback.format_exc()}")

#
async def extend_users_sub(main_bot: Bot):
    from settings import logger
    users_subs = await subscriptions_repository.select_all_active_subscriptions()
    now_datetime = datetime.datetime.now()
    extended_subs = 0
    extended_free_subs = 0
    for sub in users_subs:
        if (sub.last_billing_date + datetime.timedelta(days=sub.time_limit_subscription)) <= now_datetime:
            type_sub = await type_subscriptions_repository.get_type_subscription_by_id(type_id=sub.type_subscription_id)
            if sub is not None and sub.is_paid_sub:
                try:
                    if sub.method_id is None:
                        await subscriptions_repository.deactivate_subscription(subscription_id=sub.id)
                        await main_bot.send_message(chat_id=sub.user_id,
                                                    text="–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–∏—Ç—å —Ç–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É."
                                                     " –ï—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å, —á—Ç–æ –ø—Ä–∏ —ç—Ç–æ–º —É —Ç–µ–±—è"
                                                     " —Å–ø–∏—Å–∞–ª–∏—Å—å –¥–µ–Ω—å–≥–∏ - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–∏ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ /support")
                        continue

                    payment = create_recurring_payment(method_id=sub.method_id,
                                                      amount=type_sub.price)
                    if payment.status == 'succeeded':
                        # try:
                        max_generations = type_sub.max_generations
                        await subscriptions_repository.replace_subscription(subscription_id=sub.id,
                                                                            user_id=sub.user_id,
                                                                            time_limit_subscription=30,
                                                                            active=True,
                                                                            type_sub_id=type_sub.id,
                                                                            method_id=sub.method_id,
                                                                            photo_generations=max_generations,
                                                                            video_generations=type_sub.max_video_generations)

                        await main_bot.send_message(chat_id=sub.user_id,
                                                    text="üöÄ–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ –æ–¥–∏–Ω –º–µ—Å—è—Ü")
                        extended_subs += 1
                    else:
                        logger.log("EXTEND_SUB_ERROR", f"payment_data - {payment.json()}")
                        await main_bot.send_message(chat_id=sub.user_id,
                                                    text="–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–∏—Ç—å —Ç–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É."
                                                         " –ï—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å, —á—Ç–æ –ø—Ä–∏ —ç—Ç–æ–º —É —Ç–µ–±—è"
                                                         " —Å–ø–∏—Å–∞–ª–∏—Å—å –¥–µ–Ω—å–≥–∏ - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–∏ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ /support")
                except:
                    logger.log("EXTEND_SUB_ERROR", traceback.format_exc())
                    await main_bot.send_message(chat_id=sub.user_id,
                                                text="–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–∏—Ç—å —Ç–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É."
                                                     " –ï—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å, —á—Ç–æ –ø—Ä–∏ —ç—Ç–æ–º —É —Ç–µ–±—è"
                                                     " —Å–ø–∏—Å–∞–ª–∏—Å—å –¥–µ–Ω—å–≥–∏ - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–∏ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ /support")
            else:
                try:
                    if sub is not None:
                        await subscriptions_repository.update_time_limit_subscription(subscription_id=sub.id, new_time_limit=30)
                        extended_free_subs += 1
                except:
                    logger.log("EXTEND_SUB_ERROR", traceback.format_exc())
    logger.log("SCHEDULER_INFO",
               f"üöÄSCHEDULER extended_subs - {extended_subs} | extended_free_subs - {extended_free_subs}")

