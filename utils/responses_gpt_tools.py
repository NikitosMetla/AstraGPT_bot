# responses_gpt_tools.py

from __future__ import annotations

import asyncio
import base64
import io
import json
import mimetypes
import os
import traceback
from collections import defaultdict
from typing import Any, Optional, Sequence, Dict, List, Tuple

import aiohttp
from dotenv import find_dotenv, load_dotenv
from openai import (
    APIConnectionError,
    APIStatusError,
    APITimeoutError,
    AsyncOpenAI,
    AuthenticationError,
    PermissionDeniedError,
    RateLimitError,
    BadRequestError,
    InternalServerError,
)

from data.keyboards import subscriptions_keyboard, more_generations_keyboard, delete_notification_keyboard
from db.models import Users
from db.repository import (
    users_repository,
    subscriptions_repository,
    type_subscriptions_repository,
    generations_packets_repository,
    notifications_repository,
)
from settings import get_current_datetime_string, print_log, get_current_bot
from utils.create_notification import (
    schedule_notification,
    NotificationLimitError,
    NotificationFormatError,
    NotificationDateTooFarError,
    NotificationDateInPastError,
    NotificationPastTimeError,
    NotificationTextTooShortError,
    NotificationTextTooLongError,
)
from utils.gpt_images import AsyncOpenAIImageClient
from utils.new_fitroom_api import FitroomClient
from utils.parse_gpt_text import sanitize_with_links
from utils.runway_api import generate_image_bytes

# ----------------------------- shared ---------------------------------

_thread_locks: Dict[str, asyncio.Lock] = defaultdict(asyncio.Lock)

class NoSubscription(Exception): ...
class NoGenerations(Exception): ...

def _b64(b: bytes) -> str:
    return base64.b64encode(b).decode()


async def retrieve_with_retry(client: AsyncOpenAI, file_id: str, max_attempts: int = 4, base_delay: float = 0.5):
    attempt = 0
    while attempt < max_attempts:
        try:
            return await client.files.retrieve(file_id=file_id, timeout=3)
        except InternalServerError:
            attempt += 1
            await asyncio.sleep(base_delay * (2 ** (attempt - 1)))
    raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª {file_id} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")

async def get_thread_lock(dialog_key: str) -> asyncio.Lock:
    return _thread_locks[dialog_key]

load_dotenv(find_dotenv())
OPENAI_API_KEY: str | None = os.getenv("GPT_TOKEN") or os.getenv("OPENAI_API_KEY")
DEFAULT_IMAGE_MODEL = "gpt-image-1"
DEFAULT_IMAGE_SIZE = "1024x1024"

UNSUPPORTED_FOR_GPT_IMAGE = {"response_format", "style"}

# ----------------------------- Responses API adapter ---------------------------------

class GPTResponses:  # API —á–µ—Ä–µ–∑ /v1/responses
    """
    –ü–æ–ª–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –≤–∞—à–µ–π –ª–æ–≥–∏–∫–∏ –Ω–∞ Responses API.
    –í–º–µ—Å—Ç–æ thread_id –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è previous_response_id (—Ö—Ä–∞–Ω–∏—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
    –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫ –≤–∫–ª—é—á—ë–Ω —á–µ—Ä–µ–∑ tools=[{"type":"web_search"}].
    –ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–π–ª–∞–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ tools=[{"type":"file_search"}] + vector store.
    """

    def __init__(self):
        self.client = AsyncOpenAI(api_key=OPENAI_API_KEY)
        self.vector_store_id: str | None = None

    # --------------------- public entrypoint ---------------------

    async def send_message(
            self,
            user_id: int,
            *,
            with_audio_transcription: bool = False,
            text: str | None = None,
            image_bytes: Sequence[io.BytesIO] | None = None,
            document_bytes: Sequence[Tuple[io.BytesIO, str, str]] | None = None,
            # (buf, filename, mime_ext) ‚Äî mime_ext –∏–≥–Ω–æ—Ä–∏–º
            document_type: str | None = None,
            audio_bytes: io.BytesIO | None = None,
            user_data: Users | None = None,
            thread_id: str | None = None,
    ) -> Dict[str, Any]:
        final_content = {"text": None, "image_files": [], "files": [], "audio_file": None, "reply_markup": None}
        main_bot = get_current_bot()
        from bot import logger
        from settings import get_weekday_russian

        user = await users_repository.get_user_by_user_id(user_id=user_id)
        # model = user.model_type
        model = "gpt-5-mini"
        about_user = (user.context or "").strip()
        base_user_text = (text or "–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è").strip()

        # –µ—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç –≤—Ö–æ–¥–∞
        if not any([base_user_text, image_bytes, document_bytes, audio_bytes]):
            final_content["text"] = "–ù–µ –ø–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            return final_content

        # ====== –ö–†–ò–¢–ò–ß–ù–û: –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –ù–û–í–´–ï –§–ê–ô–õ–´ ‚Äî —è–≤–Ω–æ —Å–∫–∞–∂–µ–º –º–æ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ======
        attached_filenames: list[str] = [fn for _, fn, _ in (document_bytes or [])]
        if attached_filenames:
            files_note = (
                    "\n\nüìé –í —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ø –ü–†–ò–ö–†–ï–ü–ò–õ —Ñ–∞–π–ª—ã (–∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∏—Ö –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–π –ª—é–±—ã–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã):\n- "
                    + "\n- ".join(attached_filenames)
            )
            base_user_text += files_note

        # –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
        dialog_key = str(user.user_id)
        lock = await get_thread_lock(dialog_key)
        async with lock:
            try:
                # 1) –°–æ–±–∏—Ä–∞–µ–º –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç + –∫–∞—Ä—Ç–∏–Ω–∫–∏ (—Ñ–∞–π–ª—ã –ù–ï –∫–ª–∞–¥—ë–º –∫–∞–∫ input_file)
                content_items, _ignored_file_ids, _ignored_img_ids = await self._build_input_items(
                    base_text=base_user_text,
                    image_bytes=image_bytes,
                    document_bytes=None,  # <-- –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–æ
                    audio_bytes=audio_bytes,
                )

                # 2) –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã ‚Äî —Å–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Vector Store –∏ –≥—Ä—É–∑–∏–º —Ñ–∞–π–ª—ã –ø—Ä—è–º–æ –≤ –Ω–µ–≥–æ
                vector_store_id = None
                if document_bytes:
                    vs = await self.client.vector_stores.create(
                        name=f"vs-user-{user_id}",
                        expires_after={"anchor": "last_active_at", "days": 1},  # –∞–≤—Ç–æ-–æ—á–∏—Å—Ç–∫–∞
                    )
                    vector_store_id = vs.id

                    files_payload: list[tuple[str, io.BytesIO]] = []
                    for (doc_io, file_name, _mime_ext) in document_bytes:
                        doc_io.seek(0)
                        files_payload.append((file_name, doc_io))

                    # –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—É—Ç—å: –±–∞—Ç—á-–∞–ø–ª–æ–∞–¥ + –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
                    await self.client.vector_stores.file_batches.upload_and_poll(
                        vector_store_id=vector_store_id,
                        files=files_payload,
                    )

                # 3) –§–æ—Ä–º–∏—Ä—É–µ–º tools. –ï—Å–ª–∏ –µ—Å—Ç—å VS ‚Äî –ø–æ–¥–∫–ª—é—á–∞–µ–º file_search —Å vector_store_ids –ø—Ä—è–º–æ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                tools: list[dict] = [{"type": "web_search"}]
                if vector_store_id:
                    tools.append({
                        "type": "file_search",
                        "vector_store_ids": [vector_store_id],
                    })
                from settings import tools as settings_tools
                for t in settings_tools:
                    tools.append({
                        "type": "function",
                        "name": t["name"],
                        "description": t.get("description", ""),
                        "parameters": t.get("parameters", {"type": "object", "properties": {}}),
                        **({"strict": True} if t.get("strict") else {})
                    })
                from settings import system_prompt
                # 4) –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                system_prefix = (
                    f"–í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–†–ï–ú–ï–ù–ò:\n"
                    f"–¢–µ–∫—É—â–∏–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ: {get_current_datetime_string()}\n"
                    f"–°–µ–≥–æ–¥–Ω—è {get_weekday_russian()}\n"
                    f"–í–°–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏!\n"
                    f"–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç: '–∑–∞–≤—Ç—Ä–∞', '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', '–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç'.\n\n"
                    "–ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω file_search ‚Äî –æ–ø–∏—Ä–∞–π—Å—è –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ —Ñ–∞–π–ª–∞–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã (—Ü–∏—Ç–∏—Ä—É–π –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ) "
                    "–∏ –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ñ–∞–π–ª—ã, –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã—à–µ.\n"
                ) + "\n–û—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç:\n\n" + system_prompt
                if about_user:
                    system_prefix += f"\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n{about_user}\n\n"

                # 5) –î–ª—è –ù–û–í–´–• –î–û–ö–û–í —Ä–≤—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (—á—Ç–æ–±—ã –Ω–µ —Ç—è–Ω—É—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã/—Ü–∏—Ç–∞—Ç—ã);
                # –∏–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç—Ä–µ–¥ —á–µ—Ä–µ–∑ previous_response_id
                previous_response_id = None if document_bytes else user.last_response_id

                request_kwargs: Dict[str, Any] = {
                    "model": model,
                    "input": [
                        {"role": "system", "content": system_prefix},
                        {"role": "user", "content": content_items},
                    ],
                    "tools": tools,
                    "tool_choice": "auto",
                }
                if previous_response_id:
                    request_kwargs["previous_response_id"] = previous_response_id

                # 6) –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ Responses API
                try:
                    resp = await self._create_response(**request_kwargs)
                except BadRequestError:
                    if previous_response_id:
                        try:
                            await users_repository.update_last_response_id_by_user_id(
                                user_id=user.user_id, last_response_id=None
                            )
                        except Exception:
                            pass
                        request_kwargs.pop("previous_response_id", None)
                        resp = await self._create_response(**request_kwargs)
                    else:
                        raise

                # 7) –¶–∏–∫–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ‚Äî –≤–∞–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ –∂–µ tools (—á—Ç–æ–±—ã file_search –æ—Å—Ç–∞–≤–∞–ª—Å—è –¥–æ—Å—Ç—É–ø–µ–Ω)
                delete_message = None
                self._followup_tools = tools
                resp, tool_side_effects = await self._tool_call_loop(
                    first_response=resp,
                    user=user,
                    max_photo_generations=await self._get_remaining_generations(user),
                )

                # 8) –°–æ—Ö—Ä–∞–Ω—è–µ–º last_response_id (—É–∂–µ –Ω–æ–≤—ã–π, —Ç.–∫. –º–æ–≥–ª–∏ –ø–æ—Ä–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã—à–µ)
                try:
                    await users_repository.update_last_response_id_by_user_id(
                        user_id=user.user_id, last_response_id=resp.id
                    )
                except Exception:
                    pass

                # 9) –†–∞–∑—Ä—É–ª–∏–≤–∞–µ–º –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã/—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if tool_side_effects.get("delete_message"):
                    delete_message = tool_side_effects["delete_message"]

                if tool_side_effects.get("web_answer"):
                    if delete_message:
                        await delete_message.delete()
                    final_content["text"] = sanitize_with_links(tool_side_effects["web_answer"])
                    return final_content

                if tool_side_effects.get("notif_answer"):
                    if delete_message:
                        await delete_message.delete()
                    final_content["text"] = sanitize_with_links(tool_side_effects["notif_answer"])
                    if "‚úÖ" in final_content["text"]:
                        user_notifications = await notifications_repository.get_active_notifications_by_user_id(
                            user_id=user_id
                        )
                        if user_notifications:
                            final_content["reply_markup"] = delete_notification_keyboard(user_notifications[-1].id)
                    return final_content

                if tool_side_effects.get("final_images"):
                    if delete_message:
                        await delete_message.delete()
                    imgs = tool_side_effects["final_images"]
                    if imgs:
                        await self._consume_generations(user, count=len(imgs))
                        final_text = self._extract_text(resp) or "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                        final_content["text"] = sanitize_with_links(final_text)
                        final_content["image_files"] = imgs
                        return final_content

                files_payload = await self._maybe_collect_file_attachments_from_response(resp)
                if files_payload:
                    if delete_message:
                        await delete_message.delete()
                    final_content["files"] = files_payload
                    return final_content

                output_text = self._extract_text(resp) or "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!"
                if with_audio_transcription:
                    audio_data = await self.generate_audio_by_text(output_text)
                    final_content["text"] = sanitize_with_links(output_text)
                    final_content["audio_file"] = audio_data
                    return final_content

                final_content["text"] = sanitize_with_links(output_text)
                return final_content

            except NoSubscription:
                raise
            except NoGenerations:
                raise
            except Exception:
                await self._reset_client()
                logger.log("GPT_ERROR", f"{user_id} | –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ gpt: {traceback.format_exc()}")
                print_log(message=f"{user_id} | –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ gpt: {traceback.format_exc()}")
                final_content["text"] = (
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! "
                    "–¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
                )
                return final_content

    # --------------------- tools orchestration ---------------------

    def _compose_tools(self, *, enable_file_search: bool, enable_web_search: bool) -> list[dict]:
        tools: list[dict] = []
        if enable_web_search:
            tools.append({"type": "web_search"})
        if enable_file_search:
            tools.append({"type": "file_search"})  # –í–ê–ñ–ù–û: –≤–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å VS
        from settings import tools as settings_tools
        for t in settings_tools:
            tools.append({
                "type": "function",
                "name": t["name"],
                "description": t.get("description", ""),
                "parameters": t.get("parameters", {"type": "object", "properties": {}}),
                **({"strict": True} if t.get("strict") else {})
            })
        return tools

    def _guess_mime(self, filename: str, default: str = "application/octet-stream") -> str:
        """
        –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å MIME –¥–ª—è –ª—é–±—ã—Ö –æ—Ñ–∏—Å–Ω—ã—Ö/—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö/–∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.
        """
        # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ mimetypes –≤–µ—Ä–Ω—ë—Ç None
        custom = {
            ".pdf": "application/pdf",
            ".txt": "text/plain",
            ".csv": "text/csv",
            ".tsv": "text/tab-separated-values",
            ".md": "text/markdown",

            ".doc": "application/msword",
            ".docx": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            ".rtf": "application/rtf",

            ".xls": "application/vnd.ms-excel",
            ".xlsx": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",

            ".ppt": "application/vnd.ms-powerpoint",
            ".pptx": "application/vnd.openxmlformats-officedocument.presentationml.presentation",

            ".json": "application/json",
            ".xml": "application/xml",
            ".html": "text/html",
            ".htm": "text/html",

            ".zip": "application/zip",
            ".gz": "application/gzip",
            ".7z": "application/x-7z-compressed",
            ".rar": "application/vnd.rar",
        }
        ext = os.path.splitext(filename)[1].lower()
        if ext in custom:
            return custom[ext]
        guessed, _ = mimetypes.guess_type(filename)
        return guessed or default

    async def _upload_for_input_file(self, file_obj: io.BytesIO, filename: str, mime: str) -> str:
        """
        –ì—Ä—É–∑–∏–º —Ñ–∞–π–ª –≤ Files API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –±–ª–æ–∫–æ–≤ input_file.
        –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å purpose='user_data' (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –≤ —Å—Ä–æ—á–Ω—ã—Ö –¥–æ–∫–∞—Ö),
        –µ—Å–ª–∏ SDK/–∞–∫–∫–∞—É–Ω—Ç —Ä—É–≥–Ω—ë—Ç—Å—è ‚Äî —Ñ–æ–ª–ª–±–µ–∫ –Ω–∞ 'assistants'.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç file_id.
        """
        file_obj.seek(0)
        try:
            up = await self.client.files.create(file=(filename, file_obj, mime), purpose="user_data")
            return up.id
        except BadRequestError:
            # —Ñ–æ–ª–ª–±–µ–∫ –Ω–∞ —Å—Ç–∞—Ä—ã–π purpose
            up = await self.client.files.create(file=(filename, file_obj, mime), purpose="assistants")
            return up.id

    async def _tool_call_loop(
        self,
        *,
        first_response,
        user: Users,
        max_photo_generations: int | None,
    ):
        main_bot = get_current_bot()

        delete_message = None
        final_images: List[bytes] = []
        web_answer: Optional[str] = None
        notif_answer: Optional[str] = None

        response = first_response
        safety_counter = 0

        while True:
            safety_counter += 1
            if safety_counter > 8:
                break

            tool_calls = self._extract_tool_calls(response)
            if not tool_calls:
                break

            custom_names = self._custom_function_names()

            # –ü–æ–∫–∞–∑ ¬´–ø—Ä–æ–≥—Ä–µ—Å—Å–∞¬ª
            for tc in tool_calls:
                fname = getattr(tc, "name", None) or tc.get("name")
                if fname in ("generate_image", "edit_image_only_with_peoples", "fitting_clothes"):
                    # –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫/–ª–∏–º–∏—Ç–æ–≤
                    sub = await subscriptions_repository.get_active_subscription_by_user_id(user_id=user.user_id)
                    sub_types = await type_subscriptions_repository.select_all_type_subscriptions()
                    type_sub = await type_subscriptions_repository.get_type_subscription_by_id(type_id=sub.type_subscription_id) if sub else None
                    if sub is None or (type_sub and type_sub.plan_name == "Free"):
                        from settings import sub_text
                        await main_bot.send_message(
                            chat_id=user.user_id,
                            text="üö®–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ\n\n" + sub_text,
                            reply_markup=subscriptions_keyboard(sub_types).as_markup(),
                        )
                        raise NoSubscription("No active subscription")
                    if fname != "fitting_clothes":
                        if sub.photo_generations <= 0:
                            generations_packets = await generations_packets_repository.select_all_generations_packets()
                            from settings import buy_generations_text
                            await main_bot.send_message(
                                chat_id=user.user_id,
                                text=buy_generations_text,
                                reply_markup=more_generations_keyboard(generations_packets).as_markup(),
                            )
                            raise NoGenerations("No generations left")
                        delete_message = await main_bot.send_message(chat_id=user.user_id, text="üé®–ù–∞—á–∞–ª —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –Ω–µ–º–Ω–æ–≥–æ –º–∞–≥–∏–∏‚Ä¶")
                elif fname == "add_notification":
                    delete_message = await main_bot.send_message(chat_id=user.user_id, text="üñå–ù–∞—á–∞–ª –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —ç—Ç–æ –Ω–µ –∑–∞–π–º–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...")
                elif fname == "search_web":
                    # –≤ Responses API –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π web_search, –≤–∞—à –∫–∞—Å—Ç–æ–º —É–¥–∞–ª—ë–Ω; —ç—Ç–æ—Ç –∫–µ–π—Å –º–æ–∂–µ—Ç –Ω–µ –ø—Ä–∏–π—Ç–∏
                    delete_message = await main_bot.send_message(chat_id=user.user_id, text="üîç–ù–∞—á–∞–ª –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–∑–æ–≤—ã
            tool_results: List[dict] = []
            images_counter = 0
            for tc in tool_calls:
                name, call_id, args = self._split_tool_call(tc)
                result_payload = None
                if name not in custom_names:
                    # –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
                    # –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ web_search/file_search –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π
                    continue
                if name == "add_notification":
                    result_payload = {"text": await self._handle_add_notification(user.user_id, args)}
                    notif_answer = result_payload["text"]
                elif name in ("generate_image", "edit_image_only_with_peoples"):
                    imgs = await self._handle_image_tools(user_id=user.user_id, name=name, args=args, max_photo_generations=max_photo_generations)
                    if isinstance(imgs, list) and imgs:
                        final_images.extend(imgs)
                        images_counter += len(imgs)
                    result_payload = {"file_ids": await self._upload_images_as_files(imgs)}
                elif name == "fitting_clothes":
                    msg = await self._handle_fitting_clothes(user_id=user.user_id, args=args)
                    if isinstance(msg, str):
                        result_payload = {"text": msg}
                    else:
                        final_images.extend(msg)
                        result_payload = {"file_ids": await self._upload_images_as_files(msg)}
                elif name == "search_web":
                    # –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏; —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ web_search –≤—Å—Ç—Ä–æ–µ–Ω –≤ –º–æ–¥–µ–ª—å
                    result_payload = {"text": "–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º web_search"}
                    web_answer = "–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º web_search"
                else:
                    # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π tool ‚Äî –∏–≥–Ω–æ—Ä
                    result_payload = {"text": "ignored"}

                tool_results.append({
                    "type": "function_call_output",
                    "call_id": call_id,
                    "output": json.dumps(result_payload, ensure_ascii=False),  # —Å—Ç—Ä–æ–∫–∞!
                })

            # –ü–µ—Ä–µ–¥–∞—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–µ–ø–æ—á–∫—É —Å previous_response_id
            # –°–¢–ê–õ–û
            response = await self._create_response(
                model=user.model_type,
                previous_response_id=(first_response.id if response.id == first_response.id else response.id),
                input=tool_results,
                tools=getattr(self, "_followup_tools", [{"type": "web_search"}]),
            )

        return response, {
            "delete_message": delete_message,
            "final_images": final_images,
            "web_answer": web_answer,
            "notif_answer": notif_answer,
        }

    def _custom_function_names(self) -> set[str]:
        from settings import tools as settings_tools
        return {t["name"] for t in settings_tools}

    # --------------------- low-level Responses helpers ---------------------

    async def _create_response(self, **kwargs):
        for attempt in range(1, 6):
            try:
                return await self.client.responses.create(**kwargs)
            except (APITimeoutError, APIConnectionError, APIStatusError, RateLimitError):
                if attempt == 5:
                    raise
                await asyncio.sleep(1.5 ** attempt)
            except (AuthenticationError, PermissionDeniedError, BadRequestError):
                raise

    def _extract_tool_calls(self, resp) -> List[dict]:
        calls: List[dict] = []
        for item in getattr(resp, "output", []) or []:
            t = item.get("type") if isinstance(item, dict) else getattr(item, "type", None)
            if t == "function_call":  # Responses API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç function_call
                name = item.get("name") if isinstance(item, dict) else getattr(item, "name", None)
                call_id = item.get("call_id") if isinstance(item, dict) else getattr(item, "call_id", None)
                args = item.get("arguments") if isinstance(item, dict) else getattr(item, "arguments", None)
                calls.append({"name": name, "call_id": call_id, "arguments": args})
        return calls

    def _split_tool_call(self, tc: dict) -> Tuple[str, str, dict]:
        name = tc.get("name") or ""
        call_id = tc.get("call_id") or ""
        raw = tc.get("arguments")
        if isinstance(raw, dict):
            args = raw
        else:
            try:
                args = json.loads(raw or "{}")
            except json.JSONDecodeError:
                first_obj = (raw or "").split('}', 1)[0] + '}'
                args = json.loads(first_obj)
        return name, call_id, args

    def _extract_text(self, resp) -> Optional[str]:
        # Responses API: –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ª–µ–∂–∏—Ç –≤ output –∫–∞–∫ message-–±–ª–æ–∫(–∏)
        texts: List[str] = []
        for item in getattr(resp, "output", []) or []:
            if getattr(item, "type", None) == "message":
                # item.content –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º —Ç–æ–∫–µ–Ω–æ–≤; –ø—ã—Ç–∞–µ–º—Å—è —Å–ª–∏—Ç—å –≤ —Ç–µ–∫—Å—Ç
                parts = getattr(item, "content", None)
                if isinstance(parts, list):
                    s = []
                    for p in parts:
                        if isinstance(p, dict) and p.get("type") == "output_text" and p.get("text"):
                            s.append(p["text"])
                        elif hasattr(p, "type") and getattr(p, "type") == "output_text":
                            s.append(getattr(p, "text", "") or "")
                    if s:
                        texts.append(" ".join(s).strip())
        return (texts[0] if texts else None)

    async def _maybe_collect_file_attachments_from_response(self, resp) -> Optional[List[dict]]:
        out = []
        try:
            for item in getattr(resp, "output", []) or []:
                if getattr(item, "type", None) == "message":
                    for p in getattr(item, "content", []) or []:
                        # –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ñ–∞–π–ª—ã –∫–∞–∫ file_id
                        fid = None
                        if isinstance(p, dict) and p.get("type") in ("output_image", "output_file"):
                            fid = p.get("file_id")
                        elif hasattr(p, "type") and getattr(p, "type") in ("output_image", "output_file"):
                            fid = getattr(p, "file_id", None)
                        if fid:
                            fmeta = await self.client.files.retrieve(file_id=fid)
                            data = await self.client.files.content(file_id=fid)
                            b = await data.aread()
                            name = (fmeta.filename or "file.bin")
                            if not name.lower().endswith(".png") and getattr(p, "type", None) == "output_image":
                                name += ".png"
                            out.append({"filename": name, "bytes": b})
            return out or None
        except Exception:
            return None

    # --------------------- content builders ---------------------

    async def _build_input_items(
            self,
            *,
            base_text: str,
            image_bytes: Sequence[io.BytesIO] | None,
            document_bytes: Sequence[Tuple[io.BytesIO, str, str]] | None,
            audio_bytes: io.BytesIO | None,
    ) -> Tuple[List[dict], List[str], List[str]]:
        """
        –ö–∞—Ä—Ç–∏–Ω–∫–∏: –∫–∞–∫ data URL (image_url).
        –§–ê–ô–õ–´ –õ–Æ–ë–´–• –§–û–†–ú–ê–¢–û–í: –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ Files API –∏ –í–û–ó–í–†–ê–©–ê–ï–ú –∏—Ö file_id,
        –ù–û –ù–ï –∫–ª–∞–¥—ë–º –∏—Ö –≤ content –∫–∞–∫ input_file (—ç—Ç–æ –∏ –ª–æ–º–∞–ª–æ—Å—å –Ω–∞ –Ω–µ-PDF).
        –î–∞–ª—å—à–µ —ç—Ç–∏ file_id —É–π–¥—É—Ç –≤ Vector Store (File Search).
        """
        content: List[dict] = []
        file_ids: List[str] = []
        image_file_ids: List[str] = []

        # 1) –∫–∞—Ä—Ç–∏–Ω–∫–∏ ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if image_bytes:
            for img_io in image_bytes:
                img_io.seek(0)
                b64 = base64.b64encode(img_io.read()).decode("utf-8")
                content.append({
                    "type": "input_image",
                    "image_url": f"data:image/png;base64,{b64}",
                })

        # 2) —Ç–µ–∫—Å—Ç
        text = f"–°–µ–≥–æ–¥–Ω—è - {get_current_datetime_string()} –ø–æ –ú–æ—Å–∫–≤–µ.\n\n{base_text}"
        content.append({"type": "input_text", "text": text})

        # 3) —Ñ–∞–π–ª—ã ‚Üí Files API (purpose='assistants'), —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö id
        if document_bytes:
            for (doc_io, file_name, _mime_ext) in document_bytes:
                # MIME –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å ‚Äî SDK —Å–∞–º –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç; –µ—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –º–æ–∂–Ω–æ —É–≥–∞–¥–∞—Ç—å –∏–∑ –∏–º–µ–Ω–∏
                doc_io.seek(0)
                up = await self.client.files.create(
                    file=(file_name, doc_io),
                    purpose="assistants",
                )
                file_ids.append(up.id)

        # –ª–∏–º–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if len(content) > 12:
            content = content[-12:]

        return content, file_ids, image_file_ids

    # --------------------- vector store / file_search ---------------------

    async def _sync_vector_store(self, file_ids: List[str]) -> str:
        """
        –ö–ª–∞–¥—ë–º file_ids –≤ Vector Store –∏ –∂–¥—ë–º, –ø–æ–∫–∞ –±–∞—Ç—á –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç—Å—è.
        –í–æ–∑–≤—Ä–∞—â–∞–µ–º vector_store_id.
        """
        # —Å–æ–∑–¥–∞—ë–º/–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π VS
        if not self.vector_store_id:
            vs = await self.client.vector_stores.create(name="vs-responses")
            self.vector_store_id = vs.id

        if not file_ids:
            return self.vector_store_id

        # —Å–æ–∑–¥–∞—ë–º –±–∞—Ç—á –∏–∑ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤ Files API —Ñ–∞–π–ª–æ–≤
        batch = await self.client.vector_stores.file_batches.create(
            vector_store_id=self.vector_store_id,
            file_ids=file_ids,
        )

        # –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –±–∞—Ç—á–∞
        # —Å—Ç–∞—Ç—É—Å: "in_progress" -> "completed" | "failed" | "cancelled"
        while True:
            b = await self.client.vector_stores.file_batches.retrieve(
                vector_store_id=self.vector_store_id,
                batch_id=batch.id,
            )
            if getattr(b, "status", None) in ("completed", "failed", "cancelled"):
                break
            await asyncio.sleep(0.5)

        return self.vector_store_id

    # --------------------- tool handlers ---------------------

    async def _handle_add_notification(self, user_id: int, args: dict) -> str:
        when_send_str, text_notification = args.get("when_send_str"), args.get("text_notification")
        try:
            await schedule_notification(user_id=user_id, when_send_str=when_send_str, text_notification=text_notification)
            return f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {when_send_str} –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏\n\nüìù –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {text_notification}"
        except NotificationLimitError:
            active = await notifications_repository.get_active_notifications_by_user_id(user_id)
            return f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å {len(active)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ú–∞–∫—Å–∏–º—É–º: 10."
        except NotificationFormatError:
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:–°–°"
        except NotificationDateTooFarError:
            return "‚ùå –î–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–∞—è. –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º –¥–æ 2030 –≥–æ–¥–∞."
        except NotificationDateInPastError:
            return "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–¥ —É–∂–µ –ø—Ä–æ—à–µ–ª. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ –±—É–¥—É—â–µ–º."
        except NotificationPastTimeError:
            return "‚ùå –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º. –°–µ–π—á–∞—Å –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è."
        except NotificationTextTooShortError:
            return "‚ùå –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)."
        except NotificationTextTooLongError:
            return "‚ùå –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤)."
        except Exception:
            return "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."

    async def _handle_image_tools(self, *, user_id: int, name: str, args: dict, max_photo_generations: int | None) -> List[bytes]:
        image_client = AsyncOpenAIImageClient()
        # –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ TG, –µ—Å–ª–∏ –±—ã–ª–∏
        user = await users_repository.get_user_by_user_id(user_id=user_id)
        photo_bytes = []
        if user.last_image_id:
            for pid in user.last_image_id.split(", "):
                main_bot = get_current_bot()
                buf = io.BytesIO()
                try:
                    await main_bot.download(pid, destination=buf)
                    buf.seek(0)
                    photo_bytes.append(buf.read())
                except:
                    pass

        if name == "generate_image":
            try:
                n_req = args.get("n", 1)
                if max_photo_generations is not None:
                    n = min(n_req, max_photo_generations)
                else:
                    n = n_req
                kwargs = {
                    "prompt": args["prompt"],
                    "n": n,
                    "size": args.get("size", DEFAULT_IMAGE_SIZE),
                    "quality": args.get("quality", "low"),
                }
                if args.get("edit_existing_photo"):
                    kwargs["images"] = [("image.png", io.BytesIO(b), "image/png") for b in photo_bytes]
                return await image_client.generate(**kwargs)
            except:
                return []

        if name == "edit_image_only_with_peoples":
            try:
                prompt = (args.get("prompt") or "").strip()[:400]
                if not prompt:
                    return []
                return [await generate_image_bytes(prompt=args.get("prompt"), ratio=args.get("ratio"),
                                                   images=photo_bytes if len(photo_bytes) <= 3 else photo_bytes[:3])]
            except:
                from bot import logger
                logger.log("GPT_ERROR", f"{user_id} | –û—à–∏–±–∫–∞ edit_image_only_with_peoples: {traceback.format_exc()}")
                print_log(message=f"{user_id} | –û—à–∏–±–∫–∞ edit_image_only_with_peoples: {traceback.format_exc()}")
                return []

        return []

    async def _handle_fitting_clothes(self, *, user_id: int, args: dict) -> str | List[bytes]:
        fitroom_client = FitroomClient()
        cloth_type = (args.get("cloth_type") or "full").strip()
        swap_photos = bool(args.get("swap_photos") or False)

        user = await users_repository.get_user_by_user_id(user_id=user_id)
        photos = []
        if user.last_image_id:
            for pid in user.last_image_id.split(", "):
                main_bot = get_current_bot()
                buf = io.BytesIO()
                try:
                    await main_bot.download(pid, destination=buf)
                    buf.seek(0)
                    photos.append(buf.read())
                except:
                    pass

        if len(photos) != 2:
            return "–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã –¥–ª—è –ø—Ä–∏–º–µ—Ä–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º! –†–æ–≤–Ω–æ –¥–≤–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!"
        model_bytes = photos[1] if swap_photos else photos[0]
        cloth_bytes = photos[0] if swap_photos else photos[1]

        try:
            main_bot = get_current_bot()
            result_bytes = await fitroom_client.try_on(
                model_bytes=model_bytes,
                cloth_bytes=cloth_bytes,
                cloth_type=cloth_type,
                send_bot=main_bot,
                chat_id=user_id,
                validate=False,
            )
            return [result_bytes]
        except Exception:
            return []
        finally:
            try:
                await fitroom_client.close()
            except:
                pass

    async def _upload_images_as_files(self, images: List[bytes]) -> List[str]:
        file_ids: List[str] = []
        for idx, img in enumerate(images or []):
            f = await self.client.files.create(file=(f"result_{idx}.png", io.BytesIO(img), "image/png"), purpose="vision")
            file_ids.append(f.id)
        return file_ids

    async def _get_remaining_generations(self, user: Users) -> Optional[int]:
        sub = await subscriptions_repository.get_active_subscription_by_user_id(user_id=user.user_id)
        return (sub.photo_generations if sub else None)

    async def _consume_generations(self, user: Users, count: int):
        sub = await subscriptions_repository.get_active_subscription_by_user_id(user_id=user.user_id)
        if sub:
            await subscriptions_repository.use_generation(subscription_id=sub.id, count=count)

    # --------------------- TTS / ASR ---------------------

    @staticmethod
    async def generate_audio_by_text(text: str) -> io.BytesIO:
        url = "https://api.openai.com/v1/audio/speech"
        headers = {"Authorization": f"Bearer {OPENAI_API_KEY}", "Content-Type": "application/json"}
        payload = {"model": "gpt-4o-mini-tts", "input": text, "voice": "shimmer", "instructions": "Speak dramatic", "response_format": "mp3"}
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=payload, timeout=30) as r:
                if r.status == 200:
                    return io.BytesIO(await r.read())
                raise RuntimeError(f"TTS error {r.status}: {await r.text()}")

    @staticmethod
    async def transcribe_audio(audio_bytes: io.BytesIO, language: str = "ru") -> str:
        url = "https://api.openai.com/v1/audio/transcriptions"
        headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
        audio_bytes.name = "audio.mp3"
        data = {"file": audio_bytes, "model": "whisper-1", "language": language}
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, data=data, timeout=60) as r:
                if r.status == 200:
                    j = await r.json()
                    return j.get("text", "")
                raise RuntimeError(f"Transcription error {r.status}: {await r.text()}")

    # --------------------- maintenance ---------------------

    async def _reset_client(self):
        self.client = AsyncOpenAI(api_key=OPENAI_API_KEY)

    # === NEW ===
    async def _prepare_file_scope(
            self,
            user_id: int,
            document_bytes: Sequence[tuple[io.BytesIO, str, str]] | None,
    ) -> tuple[Optional[str], list[str]]:
        """
        –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã ‚Äì —Å–æ–∑–¥–∞—ë—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π Vector Store,
        –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—É–¥–∞ —Ñ–∞–π–ª—ã –∏ –∂–¥—ë—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (vs_id, file_names).
        """
        if not document_bytes:
            return None, []

        # 1) —Å–æ–∑–¥–∞—ë–º —ç–øhemeral VS (—Å–∞–º–æ —É–¥–∞–ª–∏—Ç—Å—è, —á—Ç–æ–±—ã –Ω–µ –∫–æ–ø–∏—Ç—å –º—É—Å–æ—Ä)
        vs = await self.client.vector_stores.create(
            name=f"vs-user-{user_id}-{int(asyncio.get_running_loop().time() * 1000)}",
            expires_after={"anchor": "last_active_at", "days": 1},  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        )
        vector_store_id = vs.id

        # 2) –≥–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±–∞—Ç—á-–∑–∞–≥—Ä—É–∑–∫–∏
        files_payload = []
        file_names: list[str] = []
        for (doc_io, file_name, _ext) in document_bytes:
            doc_io.seek(0)
            files_payload.append((file_name, doc_io))
            file_names.append(file_name)

        # 3) –≥—Ä—É–∑–∏–º –∏ –ñ–î–Å–ú –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—É—Ç—å upload_and_poll)
        await self.client.vector_stores.file_batches.upload_and_poll(
            vector_store_id=vector_store_id,
            files=files_payload,
        )
        return vector_store_id, file_names

    # === NEW ===
    def _append_attached_filenames_to_prompt(self, base_text: str, file_names: list[str]) -> str:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç —è–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤ + –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é,
        —á—Ç–æ–±—ã –º–æ–¥–µ–ª—å –ù–ï –æ–±—Ä–∞—â–∞–ª–∞—Å—å –∫ –ø—Ä–æ—à–ª—ã–º —Ñ–∞–π–ª–∞–º.
        """
        if not file_names:
            return base_text

        list_str = "\n".join(f"- {n}" for n in file_names)
        suffix = (
            "\n\nüìé –í —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ø –ü–†–ò–ö–†–ï–ü–ò–õ —Ñ–∞–π–ª—ã. "
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —ç—Ç–∏ —Ñ–∞–π–ª—ã; –ª—é–±—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –ø—Ä–æ—à–ª—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–≥–Ω–æ—Ä–∏—Ä—É–π.\n"
            f"{list_str}\n"
        )
        return (base_text or "") + suffix

