import locale
import re
from os import getenv

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv, find_dotenv

from db.repository import subscriptions_repository

storage_bot = MemoryStorage()
storage_admin_bot = MemoryStorage()


load_dotenv(find_dotenv("../.env"))
main_bot_token = getenv("MAIN_BOT_TOKEN")
token_admin_bot = getenv("ADMIN_BOT_TOKEN")
test_bot_token = getenv("TEST_BOT_TOKEN")
business_connection_id = getenv("BUSINESS_CONNECTION_ID")

MESSAGE_SPAM_TIMING=2

first_photo = "AgACAgIAAxkBAAIHFWgvsyvJI83DztTg7ht8MBDAYOTdAAL68jEbtZ6BSUvhKdFmgyGRAQADAgADeQADNgQ"
second_photo = "AgACAgIAAxkBAAIHE2gvsyuw1J5Qq_0PHECiBqUJL9yNAAL48jEbtZ6BSXG82fh961ZiAQADAgADeQADNgQ"
third_photo = "AgACAgIAAxkBAAIHFmgvsyvIF_6lUKrRzxHGEs9FFBiBAAL78jEbtZ6BSStjtX_DKxi6AQADAgADeQADNgQ"
fourth_photo = "AgACAgIAAxkBAAIHFGgvsyv25F-DuLX-Qo6BTltn6cLtAAL58jEbtZ6BSf09-Dq-8ZxbAQADAgADeQADNgQ"
photos_pages = {
    1: first_photo,
    2: second_photo,
    3: third_photo,
    4: fourth_photo,
}
#
OPENAI_ALLOWED_DOC_EXTS: set[str] = {
    'c',     # .c       text/x-c
    'cpp',   # .cpp     text/x-c++
    'cs',    # .cs      text/x-csharp
    'css',   # .css     text/css
    'doc',   # .doc     application/msword
    'docx',  # .docx    application/vnd.openxmlformats-officedocument.wordprocessingml.document
    'go',    # .go      text/x-golang
    'html',  # .html    text/html
    'java',  # .java    text/x-java
    'js',    # .js      text/javascript
    'json',  # .json    application/json
    'md',    # .md      text/markdown
    'pdf',   # .pdf     application/pdf
    'php',   # .php     text/x-php
    'pptx',  # .pptx    application/vnd.openxmlformats-officedocument.presentationml.presentation
    'py',    # .py      text/x-python
    'rb',    # .rb      text/x-ruby
    'sh',    # .sh      application/x-sh
    'tex',   # .tex     text/x-tex
    'ts',    # .ts      application/typescript
    'txt',   # .txt     text/plain
}

from datetime import datetime

def get_current_datetime_string() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏ 'YYYY-MM-DD HH:MM:SS'.
    """
    now = datetime.now()  # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ :contentReference[oaicite:0]{index=0}
    return now.strftime("%Y-%m-%d %H:%M:%S")

def print_log(message: str) -> None:
    print(message)


class InputMessage(StatesGroup):
    enter_email = State()
    enter_user_context_state = State()
    enter_message_mailing = State()
    enter_admin_id = State()
    enter_promo_days = State()
    enter_max_activations_promo = State()


async def is_valid_email(email):
    email_regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    if re.match(email_regex, email):
        return True
    else:
        return False

# ---------------------------------------------------------
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä GPT-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
# ---------------------------------------------------------
# –°–æ–∑–¥–∞—ë–º –µ–¥–∏–Ω—ã–π –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–æ –≤—Å—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
# –ò–º–ø–æ—Ä—Ç —Ä–∞–∑–º–µ—â—ë–Ω –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
# –º–æ–¥—É–ª—è settings –≤–Ω—É—Ç—Ä–∏ utils.combined_gpt_tools.
from utils.combined_gpt_tools import GPT  # noqa: E402

# –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö
gpt_assistant = GPT()

from utils.completions_gpt_tools import GPTCompletions

gpt_completions = GPTCompletions()


def get_weekday_russian(date: datetime.date = None) -> str:
    import datetime
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')

    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ ‚Äî –±–µ—Ä—ë–º —Ç–µ–∫—É—â—É—é
    if date is None:
        date = datetime.date.today()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
    return date.strftime('%A')



sub_text = """üîì –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ—Å—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –Ω–∞—à–µ–≥–æ –ò–ò-–±–æ—Ç–∞ ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä—è–º–æ –∑–¥–µ—Å—å.

–ë–∞–∑–æ–≤—ã–π –º–∏–Ω–∏–º—É–º –¥–ª—è –≤—Å–µ—Ö :
‚òëÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ 3 LLM 
‚òëÔ∏è 5 —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –ª—É—á—à–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã! 


–¢–∞—Ä–∏—Ñ—ã
‚Ä¢ <b>Smart ‚Äî 490 ‚ÇΩ/–º–µ—Å: </b>
‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ 6 LLM –º–æ–¥–µ–ª—è–º, –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –ø–æ–¥–±–∏—Ä–∞–µ–º—ã–º –ø–æ–¥ –≤–∞—à –∑–∞–ø—Ä–æ—Å
‚úÖ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ 
‚úÖ –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
‚úÖ –§—É–Ω–∫—Ü–∏—è –ø–∞–º—è—Ç–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π 
‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ 20 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π 
–≤ –º–µ—Å—è—Ü 

‚Ä¢ <b>Ultima ‚Äî 990 ‚ÇΩ/–º–µ—Å: </b>
‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–∞ –∫ 10 LLM!
‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (GPT-images, Runway)
‚úÖ –í—Å–µ –æ–ø—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ ¬´smart¬ª

üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –æ—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.

üòä –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª ‚Äî –º—ã —É–∂–µ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!"""


tools = [
                    {
                        "type": "function",
                        "function": {
                            "name": "generate_image",
                            "description": "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "prompt": {
                                        "type": "string",
                                        "description": "–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
                                    },
                                    "n": {
                                        "type": "integer",
                                        "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                                        "default": 1
                                    },
                                    "size": {
                                        "type": "string",
                                        "description": "–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                                        "default": "1024x1024"
                                    },
                                    "quality": {
                                        "type": "string",
                                        "description": "–ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                                        "default": "low"
                                    },
                                    "edit_existing_photo": {
                                        "type": "boolean",
                                        "description": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ",
                                        "default": False
                                    }
                                },
                                "required": ["prompt"]
                            }
                        }
                    },
                    {
                        "type": "function",
                        "function": {
                            "name": "edit_image_only_with_peoples",
                            "description": "–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ª—é–¥—å–º–∏ –∏—Å–ø–æ–ª—å–∑—É—è Runway API",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "prompt": {
                                        "type": "string",
                                        "description": "–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                                    },
                                    "ratio": {
                                        "type": "string",
                                        "description": "–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω",
                                        "default": "1920:1080"
                                    }
                                },
                                "required": ["prompt"]
                            }
                        }
                    },
                    {
                        "type": "function",
                        "function": {
                            "name": "search_web",
                            "description": "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "query": {
                                        "type": "string",
                                        "description": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
                                    }
                                },
                                "required": ["query"]
                            }
                        }
                    },
                    {
                        "type": "function",
                        "function": {
                            "name": "add_notification",
                            "description": "–î–æ–±–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "when_send_str": {
                                        "type": "string",
                                        "description": "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:SS"
                                    },
                                    "text_notification": {
                                        "type": "string",
                                        "description": "–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                                    }
                                },
                                "required": ["when_send_str", "text_notification"]
                            }
                        }
                    }
                ]