import asyncio
import datetime

from aiogram import Router, F, Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import Message, CallbackQuery

from data.keyboards import keyboard_for_pay, cancel_keyboard, buy_sub_keyboard, subscriptions_keyboard
from db.repository import operation_repository
from db.repository import users_repository, subscriptions_repository
from settings import InputMessage, is_valid_email
from utils.payment_for_services import create_payment, check_payment

payment_router = Router()


@payment_router.message(F.text == "/subscribe", any_state)
async def sub_message(message: Message, state: FSMContext, bot: Bot, user_data):
    await message.answer("""üîì –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ—Å—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä—è–º–æ –∑–¥–µ—Å—å.

–¢–∞—Ä–∏—Ñ—ã
‚Ä¢ Smart ‚Äî 499 ‚ÇΩ/–º–µ—Å.
‚Ä¢ Pro ‚Äî 999 ‚ÇΩ/–º–µ—Å.
‚Ä¢ Ultra ‚Äî 2000 ‚ÇΩ/–º–µ—Å: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.

üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –æ—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.

üòä –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª ‚Äî –º—ã —É–∂–µ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!""",
                         reply_markup=buy_sub_keyboard.as_markup())


@payment_router.callback_query(F.data == "subscribe")
async def choice_sub_message(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer("""–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:
–¢–∞—Ä–∏—Ñ—ã
    ‚Ä¢ Smart ‚Äî 499 ‚ÇΩ/–º–µ—Å: 100 —Ñ–æ—Ç–æ.
    ‚Ä¢ Pro ‚Äî 999 ‚ÇΩ/–º–µ—Å: 500.
    ‚Ä¢ Ultra ‚Äî 2000 ‚ÇΩ/–º–µ—Å: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.""",
                              reply_markup=subscriptions_keyboard.as_markup())


@payment_router.callback_query(F.data.startswith("choice_sub"), any_state)
async def get_day_statistic(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    user = await users_repository.get_user_by_user_id(call.from_user.id)
    call_data = call.data.split("|")
    max_generations = int(call_data[1])
    price = call_data[2]
    if user.email is None:
        await state.set_state(InputMessage.enter_email)
        await state.update_data(max_generations=max_generations, price=price)
        await call.message.answer("–î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã,"
                                  " —á—Ç–æ–±—ã –Ω–∞–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –æ –ø–æ–∫—É–ø–∫–µ üßæ\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π email üçè")
        try:
            await call.message.delete()
        finally:
            return
    payment = await create_payment(user.email, amount=price)
    await operation_repository.add_operation(operation_id=payment[0], user_id=call.from_user.id, is_paid=False,
                                                     url=payment[1])
    operation = await operation_repository.get_operation_by_operation_id(payment[0])
    keyboard = await keyboard_for_pay(operation_id=operation.id, url=payment[1], time_limit=30,
                                      max_generations=max_generations)
    await call.message.answer(text=f'–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É'
                                 f' –∑–∞ {price} —Ä—É–±–ª–µ–π.\n\n–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞",'
                                 ' —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂', reply_markup=keyboard.as_markup())
    try:
        await call.message.delete()
    finally:
        return


@payment_router.message(F.text, InputMessage.enter_email)
async def enter_user_email(message: types.Message, state: FSMContext, bot: Bot):
    if await is_valid_email(email=message.text):
        data = await state.update_data()
        price = data['price']
        max_generations = data['max_generations']
        await state.clear()
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ç–≤–æ–π email –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–∫—É–ø–æ–∫")
        await asyncio.sleep(1)
        await users_repository.update_email_by_user_id(user_id=message.from_user.id, email=message.text)
        user = await users_repository.get_user_by_user_id(message.from_user.id)
        payment = await create_payment(user.email, amount=price)
        await operation_repository.add_operation(operation_id=payment[0], user_id=message.from_user.id, is_paid=False,
                                                 url=payment[1])
        operation = await operation_repository.get_operation_by_operation_id(payment[0])
        keyboard = await keyboard_for_pay(operation_id=operation.id, url=payment[1], time_limit=30,
                                          max_generations=max_generations)
        await message.answer(text=f'–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ —Ä–∞–±–æ—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É'
                                       f' –∑–∞ 299 —Ä—É–±–ª–µ–π.\n\n–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞",'
                                       ' —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂', reply_markup=keyboard.as_markup())
        try:
            del_message_id = int(data.get("del_message_id"))
            await bot.delete_message(chat_id=message.from_user.id, message_id=del_message_id)
        except:
            return
    else:
        try:
            data = await state.update_data()
            del_message_id = int(data.get("del_message_id"))
            await bot.delete_message(chat_id=message.from_user.id, message_id=del_message_id)
        except:
            pass
        finally:
            del_message = await message.answer("–í–≤–µ–¥–µ–Ω—ã–π —Ç–æ–±–æ–π email –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑",
                                               reply_markup=cancel_keyboard.as_markup())
            await state.update_data(del_message_id=del_message.message_id)


@payment_router.callback_query(F.data.startswith("is_paid|"), any_state)
async def check_payment_callback(message: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = message.data.split("|")
    operation_id = data[1]
    max_generations = int(data[3])
    # user = await users_repository.get_user_by_user_id(message.from_user.id)
    operation = await operation_repository.get_operation_info_by_id(int(operation_id))
    payment_id = operation.operation_id
    if await check_payment(payment_id):
        await operation_repository.update_paid_by_operation_id(payment_id)
        await subscriptions_repository.add_subscription(user_id=message.from_user.id,
                                                        time_limit_subscription=30,
                                                        active=True,
                                                        max_generations=max_generations)
        await message.message.delete()
        await message.message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ ‚úÖ")
    else:
        try:
            payment = await operation_repository.get_operation_by_operation_id(payment_id)
            keyboard = await keyboard_for_pay(operation_id=operation_id, url=payment.url, time_limit=30, max_generations=max_generations)
            await message.message.edit_text("–ü–æ–∫–∞ –º—ã –Ω–µ –≤–∏–¥–∏–º, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞( –ü–æ–≥–æ–¥–∏"
                                            " –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–±–µ–¥–∏—Å—å,"
                                            " —á—Ç–æ —Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–ª –æ–ø–ª–∞—Ç—É. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–≤—è–∂–∏—Å—å"
                                            " —Å –Ω–∞–º–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /support",
                                            reply_markup=keyboard.as_markup())
        finally:
            return