import io
import pprint
import traceback
from datetime import datetime, timedelta

from aiogram import Router, F, Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import Message, CallbackQuery, BufferedInputFile, InputMediaPhoto
from aiogram.utils.chat_action import ChatActionSender
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram_media_group import media_group_handler

from data.keyboards import profiles_keyboard, cancel_keyboard, settings_keyboard, \
    confirm_clear_context, buy_sub_keyboard, subscriptions_keyboard, delete_payment_keyboard, unlink_card_keyboard, \
    confirm_delete_notification_keyboard, delete_notification_keyboard
from db.repository import users_repository, ai_requests_repository, subscriptions_repository, \
    type_subscriptions_repository, notifications_repository, referral_system_repository, promo_activations_repository, \
    dialogs_messages_repository
from settings import InputMessage, photos_pages, OPENAI_ALLOWED_DOC_EXTS, get_current_assistant, sub_text, \
    gemini_images_client, SUPPORTED_TEXT_FILE_TYPES
from utils.completions_gpt_tools import NoSubscription, NoGenerations
from utils.is_subscriber import is_subscriber, is_channel_subscriber
from utils.paginator import MechanicsPaginator
from utils.parse_gpt_text import split_telegram_html, sanitize_with_links

standard_router = Router()



async def process_ai_response(ai_response, message: Message, user_id: int, bot: Bot, request_text: str = None, photo_id: str = None, has_photo: bool = False, has_audio: bool = False, has_files: bool = False, file_id: str = None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç GPT –≤ —Ñ–æ—Ä–º–∞—Ç–µ final_content –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    from aiogram.enums import ParseMode
    
    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å), –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
    if not isinstance(ai_response, dict):
        ai_response = {"text": str(ai_response), "image_files": [], "files": [], "audio_file": None, "reply_markup": None}
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ final_content
    text = ai_response.get("text", "")
    image_files = ai_response.get("image_files", [])
    files = ai_response.get("files", [])
    audio_file = ai_response.get("audio_file")
    reply_markup: InlineKeyboardBuilder | None = ai_response.get("reply_markup", None)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (–¥–æ–∫—É–º–µ–Ω—Ç—ã, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞)
    if files:
        for file_data in files:
            try:
                await message.reply_document(
                    document=BufferedInputFile(
                        file=file_data.get("bytes"),
                        filename=file_data.get("filename")
                    ),
                    reply_markup=reply_markup.as_markup() if reply_markup else None,
                )
                text = text or "ü§ñ–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª"
            except Exception:
                print(traceback.format_exc())
                await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑",
                                     reply_markup=reply_markup.as_markup() if reply_markup else None,)
                return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if image_files:
        photos_ids = []
        for raw in image_files:
            buffer = io.BytesIO(raw)
            buffer.seek(0)

            photo = BufferedInputFile(file=buffer.getvalue(), filename="image.png")
            reply_message = await message.reply_photo(
                text=text,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True,
                photo=photo,
                reply_markup=reply_markup.as_markup() if reply_markup else None,
            )
            photos_ids.append(reply_message.photo[-1].file_id)
        await users_repository.update_last_photo_id_by_user_id(
            photo_id=", ".join(photos_ids),
            user_id=user_id
        )
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if text:
            text = sanitize_with_links(text)
            split_messages = split_telegram_html(text)
            for chunk in split_messages:
                await message.reply(
                    chunk,
                    disable_web_page_preview=True,
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup.as_markup() if reply_markup else None,
                )

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î
    await ai_requests_repository.add_request(
        user_id=user_id,
        answer_ai=text if text and text != "" else "–í—ã–¥–∞–ª —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ",
        user_question=request_text,
        generate_images=bool(image_files),
        has_photo=has_photo,
        photo_id=photo_id,
        has_audio=has_audio,
        has_files=has_files,
        file_id=file_id
    )


@standard_router.message(F.text == "/enter_promocode", any_state)
@is_channel_subscriber
async def command_enter_promocode(message: Message | CallbackQuery, state: FSMContext, bot: Bot):
    await state.set_state(InputMessage.enter_promocode)
    delete_message = await message.answer("–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, –≤–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                         reply_markup=cancel_keyboard.as_markup())
    await state.update_data(delete_message_id=delete_message.message_id)


@standard_router.message(F.text, InputMessage.enter_promocode)
@is_channel_subscriber
async def route_enter_promocode(message: Message, state: FSMContext, bot: Bot):
    promo_code = message.text
    user_id = message.from_user.id
    state_data = await state.get_data()
    delete_message_id = state_data.get("delete_message_id")
    if delete_message_id is not None:
        try:
            await bot.delete_message(chat_id=user_id, message_id=delete_message_id)
        except:
            pass
    promo = await referral_system_repository.get_promo_by_promo_code(promo_code=promo_code)
    if promo is None:
        await message.answer("–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                             reply_markup=cancel_keyboard.as_markup())
        return
    await state.clear()
    # delete_message = await message.answer("–°–µ–∫—É–Ω–¥–æ—á–∫—É, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ)")
    user = await users_repository.get_user_by_user_id(user_id=user_id)
    promo_activations = await promo_activations_repository.get_user_ids_activations_by_promo_id(promo_id=promo.id)
    if user_id in promo_activations:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã –æ—Ç–∫–∞–∑–∞—Ç—å. –¢—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã —Ä–∞–Ω–µ–µ")
        return
    await referral_system_repository.update_activations_by_promo_id(promo_id=promo.id)
    await promo_activations_repository.add_activation(promo_id=promo.id, activate_user_id=user_id)
    activate_user_sub = await subscriptions_repository.get_active_subscription_by_user_id(user_id=user_id)
    user_sub_type = await type_subscriptions_repository.get_type_subscription_by_id(type_id=activate_user_sub.type_subscription_id)
    if activate_user_sub is None or (user_sub_type and user_sub_type.plan_name == "Free"):
        promo_sub_type = await type_subscriptions_repository.get_type_subscription_by_plan_name(plan_name=f"promo_{promo_code}")
        await subscriptions_repository.add_subscription(user_id=user_id,
                                                        time_limit_subscription=promo.days_sub,
                                                        photo_generations=promo.max_generations,
                                                        type_sub_id=promo_sub_type.id,
                                                        is_paid_sub=False
                                                        )
        end_date = datetime.now() + timedelta(days=promo.days_sub)
        text = f"‚úÖ –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å <b>–ø–æ–¥–ø–∏—Å–∫–∞</b>! –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {end_date.strftime('%d.%m.%y, %H:%M')} (GMT+3)"
    else:
        await subscriptions_repository.update_time_limit_subscription(subscription_id=activate_user_sub.id,
                                                                      new_time_limit=promo.days_sub)
        await subscriptions_repository.update_generations(subscription_id=activate_user_sub.id,
                                                          new_generations=promo.max_generations)
        end_date = activate_user_sub.last_billing_date + timedelta(days=activate_user_sub.time_limit_subscription + promo.days_sub)
        text = f"‚úÖ –ö —Ç–µ–∫—É—â–µ–º—É –ø–ª–∞–Ω—É —Ç–µ–±–µ –¥–æ–±–∞–≤–∏–ª–∏ <b>{timedelta(days=promo.days_sub).days} –¥–Ω–µ–π</b>! –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {end_date.strftime('%d.%m.%y, %H:%M')} (GMT+3)"
    await message.answer(text=text)
    from settings import logger
    logger.log("PROMO_ACTIVATED", f"‚úÖ USER {user_id} | {user.username} ACTIVATE PROMO: {promo.id} | {promo.promo_code}")



@standard_router.callback_query(F.data.startswith("delete_notification"))
@is_channel_subscriber
async def delete_notification_handler(call: CallbackQuery, state: FSMContext, bot: Bot):
    call_data = call.data.split("|")
    notif_id = int(call_data[1])
    notif = await notifications_repository.get_notification_info_by_id(id=notif_id)
    await call.message.edit_text(text=f'–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –≥–æ—Ç–æ–≤ —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±:'
                                      f' "{notif.text_notification}", –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ'
                                      f' –ø—Ä–∏–π—Ç–∏ {notif.when_send.strftime("%d-%m-%Y %H:%M")}?',
                                 reply_markup=confirm_delete_notification_keyboard(notif_id).as_markup())

@standard_router.callback_query(F.data.startswith("confirm_delete_notification|"))
@is_channel_subscriber
async def confirm_delete_notification_handler(call: CallbackQuery, state: FSMContext, bot: Bot):
    call_data = call.data.split("|")
    answer = call_data[1]
    notif_id = int(call_data[2])
    notif = await notifications_repository.get_notification_info_by_id(id=notif_id)
    if answer == "yes":
        await notifications_repository.delete_active_by_notification_id(notification_id=notif_id)
        await call.message.answer(f'‚úÖ–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± - "{notif.text_notification}"'
                                  f' –Ω–∞ {notif.when_send.strftime("%d-%m-%Y %H:%M")}')
        await call.message.delete()
        return
    text = (f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {notif.when_send.strftime('%d-%m-%Y %H:%M')}"
            f" –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏\n\nüìù –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {notif.text_notification}")
    await call.message.edit_text(text=text, reply_markup=delete_notification_keyboard(notif_id).as_markup())


@standard_router.callback_query(F.data == "delete_payment", any_state)
@standard_router.message(F.text == "/unlink_card", any_state)
@is_channel_subscriber
async def sub_message(message: Message | CallbackQuery, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    user_sub = await subscriptions_repository.get_active_subscription_by_user_id(user_id=user_id)
    if user_sub:
        type_sub = await type_subscriptions_repository.get_type_subscription_by_id(type_id=user_sub.type_subscription_id)
    else:
        type_sub = None
    if type(message) == Message:
        if user_sub is None or (type_sub and type_sub.plan_name == "Free"):
            await message.answer("‚ú®–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏")
            return
        await message.answer("–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏? –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ"
                             " —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ —Å–º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å—Å—è",
                             reply_markup=unlink_card_keyboard.as_markup())
    else:
        if user_sub is None or (type_sub and type_sub.plan_name == "Free"):
            await message.message.answer("‚ú®–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏")
            return
        await message.message.delete()
        if user_sub.method_id:
            await message.message.answer("–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏? –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ"
                                 " —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ —Å–º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å—Å—è",
                                 reply_markup=unlink_card_keyboard.as_markup())
        else:
            await message.message.answer("–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, —É —Ç–µ–±—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –Ω–æ –Ω–µ –≤–∏–¥–∏–º —É —Ç–µ–±—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π"
                                         " –∫–∞—Ä—Ç—ã. –ü—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –∑–∞–Ω–æ–≤–æ")


@standard_router.callback_query(F.data == "unlink_card", any_state)
@is_channel_subscriber
async def sub_message(call: CallbackQuery, state: FSMContext, bot: Bot):
    user_id = call.from_user.id
    user_sub = await subscriptions_repository.get_active_subscription_by_user_id(user_id=user_id)
    if user_sub:
        type_sub = await type_subscriptions_repository.get_type_subscription_by_id(
            type_id=user_sub.type_subscription_id)
    else:
        type_sub = None
    if user_sub is None or (type_sub and type_sub.plan_name == "Free"):
        await call.message.answer(
            "‚ú®–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏")
        return
    if user_sub.method_id is None:
        await call.message.answer(
            "‚ú®–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è —É–∂–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –Ω–∏–∫–∞–∫–∞—è –∫–∞—Ä—Ç–∞")
        return
    await subscriptions_repository.delete_payment_method(sub_id=user_sub.id)
    await call.message.delete()
    await call.message.answer("–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–≤—è–∑–∞–ª–∏ —Ç–≤–æ–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã. –¢–µ–ø–µ—Ä—å —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")


@standard_router.message(F.text == "/subscribe", any_state)
@is_channel_subscriber
async def sub_message(message: Message, state: FSMContext, bot: Bot):
    # await message.answer("‚ú®–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ –∏ —É —Ç–µ–±—è"
    #                      " –∏–º–µ–µ—Ç—Å—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É")
    user_sub = await subscriptions_repository.get_active_subscription_by_user_id(user_id=message.from_user.id)
    type_sub = await type_subscriptions_repository.get_type_subscription_by_id(type_id=user_sub.type_subscription_id)
    if user_sub is None or type_sub.plan_name == "Free":
        sub_types = await type_subscriptions_repository.select_all_type_subscriptions()
        await message.answer(sub_text,
                                  reply_markup=subscriptions_keyboard(sub_types).as_markup())
    else:
        await message.answer(f"–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞"
                             f" - {type_sub.plan_name} –∑–∞ {type_sub.price} —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü."
                             " –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É, —Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                             reply_markup=delete_payment_keyboard.as_markup())


@standard_router.callback_query(F.data.startswith("mechanics_paginator"))
@is_channel_subscriber
async def get_page_paginator(call: CallbackQuery, state: FSMContext):
    call_data = call.data.split(":")
    page_now = int(call_data[2])
    paginator = MechanicsPaginator(page_now)
    if call_data[1] == "page_prev_keys":
        keyboard = paginator.generate_prev_page()
        await call.message.edit_media(media=InputMediaPhoto(media=photos_pages.get(paginator.page_now)),
                                      reply_markup=keyboard)

    elif call_data[1] == "page_next_keys":
        keyboard = paginator.generate_next_page()
        await call.message.edit_media(media=InputMediaPhoto(media=photos_pages.get(paginator.page_now)),
                                      reply_markup=keyboard)


@standard_router.message(F.text == "/instructions", any_state)
@standard_router.message(F.text == "/start", any_state)
@is_channel_subscriber
async def send_user_message(message: Message, state: FSMContext, bot: Bot, user_data):
    paginator = MechanicsPaginator(page_now=1)
    keyboard = paginator.generate_now_page()
    try:
        await message.answer_photo(photo=photos_pages.get(paginator.page_now),
                                   reply_markup=keyboard)
    except:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –¢—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ —Ä–∞–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —è –º–æ–≥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ —Ä–µ—à–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∑–∞–¥–∞—á–∏!")


@standard_router.message(F.text == "/profile", any_state)
@is_channel_subscriber
async def send_user_message(message: Message, state: FSMContext, bot: Bot):
    user_sub = await subscriptions_repository.get_active_subscription_by_user_id(user_id=message.from_user.id)
    type_sub = await type_subscriptions_repository.get_type_subscription_by_id(type_id=user_sub.type_subscription_id)
    date_now = datetime.now().date()
    days_left = user_sub.last_billing_date.date() + timedelta(days=user_sub.time_limit_subscription) - date_now
    await message.answer(f'üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\n‚úì –ü–æ–¥–ø–∏—Å–∫–∞: {type_sub.plan_name}\n–î–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è:'
                         f' {days_left.days if type_sub.plan_name != "Free" else "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"}\n'
                         f'‚úì –î–æ—Å—Ç—É–ø: {"–ü–æ–ª–Ω—ã–π –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º" if type_sub.plan_name != "Free" else "–ë–∞–∑–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –∞–≥–µ–Ω—Ç–æ–º"}'
                         f'\n\n‚ú® –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è\n–•–æ—á–µ—à—å –∏–¥–µ–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã? –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –≤ '
                         '"–ù–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"! –ë–æ—Ç —É—á—Ç—ë—Ç —ç—Ç–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏:\n- –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ\n- '
                         '–ù–∞–ø–∏—Å–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤\n- –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n\n–ß–µ–º –±–æ–ª—å—à–µ –∑–Ω–∞–µ—Ç –±–æ—Ç ‚Äî —Ç–µ–º —Ç–æ—á–Ω–µ–µ –ø–æ–º–æ–≥–∞–µ—Ç!',
                         reply_markup=profiles_keyboard.as_markup())
    # await message.answer(f'üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\n‚úì –î–æ—Å—Ç—É–ø: –ü–æ–ª–Ω—ã–π –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º'
    #                      f'\n\n‚ú® –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è\n–•–æ—á–µ—à—å –∏–¥–µ–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã? –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –≤ '
    #                      '"–ù–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"! –ë–æ—Ç —É—á—Ç—ë—Ç —ç—Ç–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏:\n- –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ\n- '
    #                      '–ù–∞–ø–∏—Å–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤\n- –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n\n–ß–µ–º –±–æ–ª—å—à–µ –∑–Ω–∞–µ—Ç –±–æ—Ç ‚Äî —Ç–µ–º —Ç–æ—á–Ω–µ–µ –ø–æ–º–æ–≥–∞–µ—Ç!',
    #                      reply_markup=profiles_keyboard.as_markup())


@standard_router.message(F.text == "/clear_context", any_state)
@is_channel_subscriber
async def send_user_message(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    await message.answer('–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞?',
                         reply_markup=confirm_clear_context.as_markup())

@standard_router.callback_query(F.data == "clear_context", any_state)
@is_channel_subscriber
async def send_user_message(call: CallbackQuery, state: FSMContext, bot: Bot):
    user_id = call.from_user.id
    await dialogs_messages_repository.delete_messages_by_user_id(user_id=user_id)
    # await users_repository.update_thread_id_by_user_id(user_id=user_id, thread_id=None)
    await call.message.delete()
    await call.message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–≤–æ–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω‚ú®")

@standard_router.callback_query(F.data == "not_clear_context", any_state)
@is_channel_subscriber
async def send_user_message(call: CallbackQuery, state: FSMContext, bot: Bot):
    await call.message.delete()


@standard_router.message(F.text == "/settings", any_state)
@is_channel_subscriber
async def send_user_message(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    await message.answer('üë§ ü§ñ –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã\n\n‚Ä¢ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π ‚Äî –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ'
                         ' –≤–æ–ø—Ä–æ—Å—ã üòé\n‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ‚Äî –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, –∫–æ–¥ –∏ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã üß†\n\n–ü—Ä–æ—Å—Ç–æ'
                         ' –Ω–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –∏ –º—ã —Å—Ä–∞–∑—É –ø–æ–º–æ–∂–µ–º!',
                         reply_markup=settings_keyboard.as_markup())


@standard_router.message(F.text == "/support", any_state)
async def send_user_message(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    await message.answer('‚òéÔ∏è –î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ - –Ω–∞–ø–∏—à–∏ –≤ –Ω–∞—à —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ @sozdav_ai')


@standard_router.callback_query(F.data == "edit_user_context", any_state)
@is_channel_subscriber
async def send_user_message(call: CallbackQuery, state: FSMContext, bot: Bot):
    user = await users_repository.get_user_by_user_id(user_id=call.from_user.id)
    delete_message = await call.message.answer(f"AstraGPT –∑–∞–ø–æ–º–Ω–∏—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Å–µ–π—á–∞—Å"
                              f" –≤–≤–µ–¥–µ—Ç–µ –∏ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –µ–µ –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–∞—Å!\n\n–í–∞—à –Ω—ã–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n{user.context}",
                              reply_markup=cancel_keyboard.as_markup())
    await state.set_state(InputMessage.enter_user_context_state)
    await call.message.delete()
    await state.update_data(delete_message_id=delete_message.message_id)


@standard_router.callback_query(F.data.startswith("mode|"), any_state)
@is_channel_subscriber
@is_subscriber
async def send_user_message(call: CallbackQuery, state: FSMContext, bot: Bot):
    mode = call.data.split("|")[1]
    chat = await bot.get_chat(call.from_user.id)
    pinned = chat.pinned_message
    if pinned is not None:
        result= await bot.unpin_chat_message(
            chat_id=call.from_user.id,
            message_id=pinned.message_id  # ID –æ—Ç–∫—Ä–µ–ø–ª—è–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        )
    if mode == "universal":
        await users_repository.update_model_type_by_user_id(model_type="gpt-4.1-mini", user_id=call.from_user.id)
        pin_message = await call.message.answer("–ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å - ü§ñ–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è")
    else:
        await users_repository.update_model_type_by_user_id(model_type="gpt-4.1", user_id=call.from_user.id)
        pin_message = await call.message.answer("–ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å - üß†–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è")
    await pin_message.pin()
    await call.message.delete()


@standard_router.callback_query(F.data == "cancel", any_state)
@is_channel_subscriber
async def send_user_message(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    await call.message.delete()


@standard_router.message(F.text, InputMessage.enter_user_context_state)
@is_channel_subscriber
async def standard_message_handler(message: Message, state: FSMContext, bot: Bot):
    state_data = await state.get_data()
    await state.clear()
    delete_message_id = state_data.get('delete_message_id')
    await bot.delete_message(message_id=delete_message_id, chat_id=message.from_user.id)
    await users_repository.update_context_by_user_id(user_id=message.from_user.id, user_context=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")



@standard_router.message(F.text)
@is_channel_subscriber
async def standard_message_handler(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    text = message.text
    user_id = message.from_user.id
    user = await users_repository.get_user_by_user_id(user_id=user_id)
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        try:
            ai_answer = await get_current_assistant().send_message(user_id=user_id,
                                                         thread_id=user.standard_ai_threat_id,
                                                         text=text,
                                                         user_data=user)
        except NoSubscription:
            return
        except NoGenerations:
            return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
    await process_ai_response(
        ai_response=ai_answer,
        message=message,
        user_id=user_id,
        bot=bot,
        request_text=text
    )



@standard_router.message(
    F.media_group_id,                 # —Ç–æ–ª—å–∫–æ –∞–ª—å–±–æ–º—ã
    F.content_type == "photo"         # —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
)

@media_group_handler   # —Å–æ–±–∏—Ä–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫
@is_channel_subscriber
async def handle_photo_album(messages: list[types.Message], state: FSMContext, bot: Bot):
    await state.clear()
    first = messages[0]
    user_id = first.from_user.id
    await bot.send_chat_action(chat_id=first.chat.id, action="typing")
    user = await users_repository.get_user_by_user_id(user_id=user_id)

    # –û–±—â–∏–π caption Telegram –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –∞–ª—å–±–æ–º–∞‚ÄÇ
    text = "\n".join([message.caption for message in messages if message.caption is not None])
    # print(text)
    # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ ‚Üí BytesIO
    image_buffers: list[io.BytesIO] = []
    photo_ids: list[str] = []
    messages.sort(key=lambda x: x.message_id)
    for msg in messages:
        buf = io.BytesIO()
        await bot.download(msg.photo[-1], destination=buf)
        image_buffers.append(buf)
        photo_ids.append(msg.photo[-1].file_id)
        # print(msg.photo[-1].file_id)
    await users_repository.update_last_photo_id_by_user_id(photo_id=", ".join(photo_ids), user_id=user_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –≤ GPT
    async with ChatActionSender.typing(bot=bot, chat_id=first.chat.id):
        # await bot.send_chat_action(chat_id=first.chat.id, action="typing")
        # photo_answer = await gemini_images_client.generate_gemini_image(prompt=text,
        #                                            reference_images=[image_buffer.read() for image_buffer in image_buffers],)
        # photo = BufferedInputFile(file=photo_answer, filename="image.png")
        # await first.answer_photo(photo=photo)
        try:
            ai_answer = await get_current_assistant().send_message(
                user_id=user_id,
                thread_id=user.standard_ai_threat_id,
                text=text,
                user_data=user,
                image_bytes=image_buffers,
            )
        except NoSubscription:
            return
        except NoGenerations:
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
        await process_ai_response(
            ai_response=ai_answer,
            message=first,
            user_id=user_id,
            bot=bot,
            request_text=first.caption,
            photo_id=", ".join(photo_ids),
            has_photo=True
        )



@standard_router.message(F.photo)
@is_channel_subscriber
async def standard_message_photo_handler(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    user_id = message.from_user.id
    user = await users_repository.get_user_by_user_id(user_id=user_id)
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        text = message.caption
        photo_bytes_io = io.BytesIO()
        photo_id = message.photo[-1].file_id
        await users_repository.update_last_photo_id_by_user_id(photo_id=photo_id, user_id=user_id)
        await bot.download(message.photo[-1], destination=photo_bytes_io)
        # photo_answer = await gemini_images_client.generate_gemini_image(prompt=text,
        #                                            reference_images=photo_bytes_io.read())
        # photo = BufferedInputFile(file=photo_answer, filename="image.png")
        # await message.answer_photo(photo=photo)
        try:
            ai_answer = await get_current_assistant().send_message(user_id=user.user_id,
                                                         thread_id=user.standard_ai_threat_id,
                                                         text=text,
                                                         user_data=user,
                                                         image_bytes=[photo_bytes_io])
        except NoSubscription:
            return
        except NoGenerations:
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
        await process_ai_response(
            ai_response=ai_answer,
            message=message,
            user_id=user_id,
            bot=bot,
            request_text=message.caption,
            photo_id=photo_id,
            has_photo=True
        )


@standard_router.message(F.voice)
@is_channel_subscriber
@is_subscriber
async def standard_message_voice_handler(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    user_id = message.from_user.id
    user = await users_repository.get_user_by_user_id(user_id=user_id)
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        audio_bytes_io = io.BytesIO()
        await bot.download(message.voice.file_id, destination=audio_bytes_io)
        # Telegram —Å–æ–æ–±—â–∞–µ—Ç mime_type –¥–ª—è voice
        mime = getattr(message.voice, "mime_type", None)  # Telegram –¥–∞—ë—Ç audio/ogg –∏ —Ç.–ø.

        try:
            transcribed_audio_text = await get_current_assistant().transcribe_audio(
                audio_bytes=audio_bytes_io,
                language="ru"
            )
        except:
            print(traceback.format_exc())
            await message.answer("–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, —á—Ç–æ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
            return
        # print(transcribed_audio_text)
        try:
            ai_answer = await get_current_assistant().send_message(
                user_id=user_id,
                thread_id=user.standard_ai_threat_id,
                text=transcribed_audio_text,
                user_data=user)
        except NoSubscription:
            return
        except NoGenerations:
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
        await process_ai_response(
            ai_response=ai_answer,
            message=message,
            user_id=user_id,
            bot=bot,
            request_text=transcribed_audio_text,
            has_audio=True
        )


@standard_router.message(
    F.media_group_id,
    F.content_type == "document"
)
@media_group_handler
@is_channel_subscriber
async def handle_document_album(messages: list[types.Message],  state: FSMContext, bot: Bot,):
    await state.clear()
    first = messages[-1]
    user_id = first.from_user.id
    user = await users_repository.get_user_by_user_id(user_id=user_id)
    await bot.send_chat_action(chat_id=first.chat.id, action="typing")
    text = "\n".join([message.caption or "" for message in messages]) or "–í–æ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –º–Ω–æ–π —Ñ–∞–π–ª—ã, –∏–∑—É—á–∏ –∏—Ö"

    doc_buffers: list[tuple[io.BytesIO, str, str]] = []
    file_ids: list[str] = []


    if any(message.document.file_name.split('.')[-1].lower() in ['jpg', 'jpeg', 'png', "DNG", "gif", "dng"] for message in messages):
        try:
            ai_answer = await get_current_assistant().send_message(
                user_id=user_id,
                thread_id=user.standard_ai_threat_id,
                text=text,
                user_data=user,
                image_bytes=[photo[0] for photo in doc_buffers if photo[2] in ['jpg', 'jpeg', 'png', "DNG", "gif", "dng"]],
                document_bytes=[doc for doc in doc_buffers if doc[2] not in ['jpg', 'jpeg', 'png', "DNG", "gif", "dng"]]
            )
        except NoSubscription:
            return
        except NoGenerations:
            return
    else:
        for msg in messages:
            buf = io.BytesIO()
            await bot.download(msg.document, destination=buf)
            file_name = msg.document.file_name
            # print(file_name)
            ext = file_name.split('.')[-1].lower()
            if ext not in SUPPORTED_TEXT_FILE_TYPES:
                await first.reply(
                    f"‚ö†Ô∏è –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ ¬´{msg.document.file_name}¬ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. "
                    f"–ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤: {', '.join(sorted(SUPPORTED_TEXT_FILE_TYPES))}"
                )
                return
            doc_buffers.append((buf, file_name, ext))
            file_ids.append(msg.document.file_id)
        try:
            ai_answer = await get_current_assistant().send_message(
                user_id=user_id,
                thread_id=user.standard_ai_threat_id,
                text=text,
                user_data=user,
                document_bytes=doc_buffers
            )
        except NoSubscription:
            return
        except NoGenerations:
            return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
    await process_ai_response(
        ai_response=ai_answer,
        message=first,
        user_id=user_id,
        bot=bot,
        request_text=text,
        has_files=True,
        file_id=", ".join(file_ids)
    )



@standard_router.message(F.document, F.media_group_id.is_(None))
@is_channel_subscriber
@is_subscriber
async def standard_message_document_handler(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    user_id = message.from_user.id
    user = await users_repository.get_user_by_user_id(user_id=user_id)
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        # delete_message = await message.reply("–§–æ—Ä–º—É–ª–∏—Ä—É—é –æ—Ç–≤–µ—Ç, —ç—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ –±–æ–ª–µ–µ 5 —Å–µ–∫—É–Ω–¥")
        text = message.caption
        # print(text)
        buf = io.BytesIO()
        file_id = message.document.file_id
        # print(file_id)
        await bot.download(message.document.file_id, destination=buf)


        file_name = message.document.file_name
        ext = file_name.split('.')[-1].lower()

        # print("slkdjfslkdjfklsdf")
        if message.document.file_name:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            extension = message.document.file_name.split('.')[-1].lower()
            if extension in ['jpg', 'jpeg', 'png', "DNG", "gif", "dng"]:
                await users_repository.update_last_photo_id_by_user_id(photo_id=message.document.file_id, user_id=user_id)
                try:
                    ai_answer = await get_current_assistant().send_message(user_id=user_id,
                                                                 thread_id=user.standard_ai_threat_id,
                                                                 text=text,
                                                                 user_data=user,
                                                                 image_bytes=[buf])
                except NoSubscription:
                    return
                except NoGenerations:
                    return
            else:
                if ext not in SUPPORTED_TEXT_FILE_TYPES:
                    await message.reply(
                        f"‚ö†Ô∏è –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ ¬´{message.document.file_name}¬ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. "
                        f"–ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤: {', '.join(sorted(SUPPORTED_TEXT_FILE_TYPES))}"
                    )
                    return
                try:
                    ai_answer = await get_current_assistant().send_message(user_id=user_id,
                                                                 thread_id=user.standard_ai_threat_id,
                                                                 text=text,
                                                                 user_data=user,
                                                                 document_bytes=[(buf, file_name, ext)],
                                                                 document_type=extension)
                    # print(ai_answer)
                except NoSubscription:
                    return
                except NoGenerations:
                    return

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
            await process_ai_response(
                ai_response=ai_answer,
                message=message,
                user_id=user_id,
                bot=bot,
                request_text=message.caption,
                has_files=True,
                file_id=message.document.file_id
            )





